Внедрение зависимостей для домохозяек. Инверсия контроля для детей.
Сказка про забывчивого программиста Вову.

Рассеянный программист Вова собирается на работу. Сонный просыпается, умывается, одевается, идет на работу.
(показать Day1GiongTowork)
Через весь иннополис - на другой конец города - идет он полдня. И...
(запустить Day1GoingToWork)

Грустно идет домой.
Дома ему звонит коллега. И говорит "ты бы позвонил - я бы вышел и тебя встретил".
Ладно, думает Вова. Если что так и сделаю.

На второй день Вова снова собирается сонный. Про пропуск он забыл, но про телефон то вспомнил и взял с собой.
Снова полдня идет на работу. Посреди пути вспоминает про пропуск, но успокаивается, ведь он взял телефон...
(показать Day2GiongToWork)
Приходит на работу, звонит, и...
(запустить Day2GoingToWork)

Телефон, пропуск, другие какие-то вещи - это зависимости. От них зависит нормальное существование программиста Вовы.
И Вову сильно расстраивает то, что приходится это все самому контролировать.
Вот было бы здорово, если бы Вова отвечал только за свою работу. Вова вообще существует ради одной великой цели по SOLID-у - работу работать.
А вот этот дополнительный контроль за мелочами, за зависимостями всякими - надо кому то отдать.

Рассеянный программист Вова женился. Прямо вот в тот же вечер и женился.
На девушке Насте со странной фамилией Даггер.
Теперь его утром на работу собирает Настя.
(показать файл WifeComponent)

Все зависимости Вова теперь не ищет по квартире. А перед выходом из дома - получает от жены Насти. Он в ней уверен - что она даст ему правильный пропуск, заряженный телефон и поцелует в лоб. Настя - очень организованная девушка. И разделила свои обязанности на части, которые назвала модулями.
(Показать файлы модулей).
При этом когда Настя Даггер работает с каким-то отдельным модулем - она там контролирует процесс так как ей нужно. Например не забывает зарядить телефон.
(показать файл SmartPhoneComponent)
Наступает момент истины - Вова пошел на работу.
(Показать и запустить файл Day3GoingToWork)

Вова был счастлив. Вроде бы. Что-то его все равно беспокоило.
Что-то еще можно было оптимизировать. А программист не успокоится пока не оптимизирует.
И Вова понял! Почему это он все равно сам должен помнить - что именно он должен взять?
(показать конструктор программиста из третьего дня)
И что будет - если надо будет еще от чего-то зависеть, например носить с собой маску.
(попробовать дописать поле c типом Mask)
Это же надо конструктор поддерживать в актуальном состоянии.
Лучше прописать как-то по умолчанию все, что мне нужно. А от конструктора вообще отказаться.
(показать программиста из 4 дня)
Настя Даггер тоже изменилась в своем поведении.
(показать интерфейс Wife из 3 дня)
Раньше она по любому запросу предоставляла нужную зависимость.
(переключиться на аналог 4 дня)
Теперь же она имеет больше полномочий - Вова полностью ей отдается и она ему по карманам рассовывает все что нужно.
(переключиться на 4 день)
Вот мы видим - конструктора с параметрами у Вовы боьлше нет. И вот мы видим как Настя раскладывает ему все по карманам в один метод.
(запустить и убедиться что все работает)

Кроме того, обратите внимание, что даггеровские модули мы не переписывали. То есть процесс создания сущностей, на которые есть зависимость - вообще такой же. Изменился только способ внедрения этих зависимостей.

Подведем итог.
Если у класса есть поля - можно называть это зависимостями.
Можно сделать так, чтобы сам класс не занимался контролем за своими зависимостями - отдал бы этот контроль какому-то внешнему механизму.
Это инверсия контроля. Внешний механизм может предоставлять эти зависимости, заранее правильно приготовленные, по запросу. А может и сам разложить эти зависимости в поля класса. Это - внедрение зависимостей.

Далее нужно рассказать про приватные и финальные поля - почему нельзя на них вешать инжект.